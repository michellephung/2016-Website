// Generated by CoffeeScript 1.3.1
(function() {
  var black, clickable, darkgray, fontfamily, gray, green, orange, purple, red, white, yellow, powerBar, powerDots;
  black = '#000';
  gray = '#B3B3B3';
  orange = "#2c9ad0"; 
  yellow = '#FFE303';
  green = '#0f0';
  purple = "#8A2BE2";
  clickable = '#7922A2';
  red = "#B20000";
  darkgray = '#767676';
  powerBar = darkgray;
  powerDots = red;
  fontfamily = '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';

  window.onload = function() {
    var addArrows, and_gate_path, arrow1, arrow2, arrow3, arrows, changeGateOutput, changeOuts, clickables, columnLabels, g, gate, gate_input_a, gate_input_b, gate_output_c, groundLine, highlightRowinTable, ii, input, inputA, inputA_label, inputB, inputB_label, inputa, inputb, io, labels, makeMovingLine, midPiece, midText, oi, onclickEvent, oo, out, outputSignal, outputTransistor, output_label, outputc, powerLine, r, rows, showWires, table, toggle, transistorA, transistorB, transistorC, transistorSymbol;
    r = new Raphael('transistor-and-ralph', 647, 450);
    g = new Raphael('ANDgate_and_TT', 400, 400);
    and_gate_path = "M170.871,78.002h-25.262c-0.893-16-13.633-28-29.172-28H91.797h-5.926v4.623v8.377h-31v4h31v25h-31v4h31 v6.761v5.239h5.926h24.641c15.539,0,28.279-12,29.172-27h25.262V78.002z M116.438,103.002H90.871v-48h25.566 c13.273,0,24.07,10.728,24.07,24S129.711,103.002,116.438,103.002z";
    gate = g.path(and_gate_path).attr({
      fill: black,
      stroke: black
    });
    table = g.path("M250,45 h120 m-50,-20 v110 ").attr({
      'stroke': black,
      'stroke-width': "1.5px"
    });

    var xpos=345;
    rows = g.set().push(
      oo = g.text(xpos, 60, " 0 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0" + 0), 
      oi = g.text(xpos, 80, " 0 \u00a0\u00a0\u00a0 1  \u00a0\u00a0\u00a0 \u00a0" + 0), 
      io = g.text(xpos, 100, " 1 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0" + 0), 
      ii = g.text(xpos, 120, " 1 \u00a0\u00a0\u00a0 1 \u00a0\u00a0\u00a0 \u00a0" + 1)).attr({
      'font-size': '18px',
      'fill': darkgray,
      'text-anchor': 'end',
      'font-family': fontfamily
    });
    columnLabels = g.set().push(inputa = g.text(265, 30, "A"), inputb = g.text(301, 30, "B"), outputc = g.text(341, 30, "C")).attr({
      'font-size': '18px',
      'fill': darkgray,
      'font-family': fontfamily
    });
    clickables = g.set().push(gate_input_a = g.text(45, 65, "A"), gate_input_b = g.text(45, 95, "B")).attr({
      'font-size': '18px',
      'fill': clickable,
      'font-family': fontfamily
    });
    gate_output_c = g.text(185, 80, "C").attr({
      'font-size': '18px',
      'fill': darkgray,
      'font-family': fontfamily
    });
    powerLine = r.path("M50,50 h 600").attr({
      fill: powerBar,
      stroke: powerBar,
      'stroke-width': '7pt'
    });
    groundLine = r.path("M50, 350 h600").attr({
      fill: black,
      'stroke-width': '7pt'
    });
    input = r.path("M200,50 v 100 h-50 v 50 h 50 v 50 h-50 v 50 h 50 v 50").attr({
      stroke: black,
      'stroke-width': '7pt'
    });
    midPiece = r.path("M200, 130 h 70 v95 h40").attr({
      stroke: black,
      'stroke-width': '7pt'
    });
    outputTransistor = r.path("M425, 50 v150 h-50 v50 h50 v100").attr({
      stroke: black,
      'stroke-width': '7pt'
    });
    outputSignal = r.path("M 425, 150 h 50").attr({
      stroke: black,
      'stroke-width': '7pt'
    });
    inputA = r.text(100, 175, "0").attr({
      'font-size': '30px',
      fill: clickable,
      'font-family': fontfamily
    });
    inputB = r.text(100, 275, "0").attr({
      'font-size': '30px',
      fill: clickable,
      'font-family': fontfamily
    });
    out = r.text(490, 150, "Output").attr({
      'font-size': '30px',
      fill: black,
      'text-anchor': 'start',
      'font-family': fontfamily
    });
    midText = r.text(327, 225, "1").attr({
      'font-size': '30px',
      fill: black,
      'font-family': fontfamily
    });
    arrows = r.set().push(arrow1 = r.path("M200,150 v50"), arrow2 = r.path("M200, 250 v50"), arrow3 = r.path("M425, 200 v50")).attr({
      stroke: orange,
      'stroke-width': '3pt'
    }).hide();
    transistorSymbol = r.set().push(transistorA = r.path("M 135, 150 v50 m0,-25 h-20"), transistorB = r.path("M 135, 250 v50 m0,-25 h-20"), transistorC = r.path("M 360, 200 v50 m0,-25 h-20")).attr({
      'stroke-width': '4pt'
    });
    labels = r.set().push(inputA_label = r.text(100, 150, "input A"), inputB_label = r.text(100, 250, "input B"), output_label = r.text(500, 125, 'output')).attr({
      'font-size': '14px',
      'font-family': fontfamily,
      fill: darkgray
    });
    toggle = function(input) {
      if (input === '1' || input === 1) {
        return 0;
      } else {
        return 1;
      }
    };
    addArrows = function() {
      var a, b, c, mid;
      a = parseInt(inputA.attr('text'), 2);
      b = parseInt(inputB.attr('text'), 2);
      mid = parseInt(midText.attr('text'), 2);
      return c = parseInt(out.attr('text'), 2);
    };
    changeOuts = function() {
      var a, b, c, mid;
      a = parseInt(inputA.attr('text'), 2);
      b = parseInt(inputB.attr('text'), 2);
      mid = parseInt(midText.attr('text'), 2);
      c = parseInt(out.attr('text'), 2);
      if (a | b) {
        midText.attr('text', 1);
      }
      if (a & b) {
        midText.attr('text', 0);
      }
      mid = parseInt(midText.attr('text'), 2);
      if (mid === 1) {
        return out.attr('text', 0);
      } else {
        return out.attr('text', 1);
      }
    };
    makeMovingLine = function(path, dashType, color, width, htmlid) {
      var i, interval, move, name;
      name = r.path(path).attr({
        'stroke-dasharray': dashType,
        'stroke-width': width,
        stroke: color
      });
      name.node.id = htmlid;
      $('#' + htmlid).hide();
      i = 0;
      move = function() {
        $('#' + htmlid).attr('stroke-dashoffset', i--);
        if (i < -20) {
          return i = 0;
        }
      };
      return interval = window.setInterval(move, 50);
    };
    showWires = function() {
      var a, b, mid;
      a = parseInt(inputA.attr('text'), 2);
      b = parseInt(inputB.attr('text'), 2);
      mid = parseInt(midText.attr('text'), 2);
      if (mid === 0) {
        $('#Output_UP').show();
        $('#Output_DOWN').hide();
      } else {
        $('#Output_UP').hide();
        $('#Output_DOWN').show();
      }
      if (a === 1) {
        $('#InputAON').show();
      } else {
        $('#InputAON').hide();
      }
      if (a === 1 && b === 1) {
        $('#InputBON').show();
        return $('#OO').hide();
      } else {
        $('#InputBON').hide();
        return $('#OO').show();
      }
    };
    highlightRowinTable = function() {
      var a, b;
      a = parseInt(inputA.attr('text'));
      b = parseInt(inputB.attr('text'));
      rows.attr({
        fill: darkgray
      });
      if (a === '0' || a === 0) {
        if (b === '0' || b === 0) {
          return oo.attr({
            fill: orange
          });
        } else {
          return oi.attr({
            fill: orange
          });
        }
      } else {
        if (b === '0' || b === 0) {
          return io.attr({
            fill: orange
          });
        } else {
          return ii.attr({
            fill: orange
          });
        }
      }
    };
    changeGateOutput = function() {
      var a, b;
      a = parseInt(inputA.attr('text'));
      b = parseInt(inputB.attr('text'));
      if (a === 1 && b === 1) {
        return gate_output_c.attr('text', 1);
      } else {
        return gate_output_c.attr('text', 0);
      }
    };
    onclickEvent = function() {
      changeOuts();
      addArrows();
      showWires();
      highlightRowinTable();
      return changeGateOutput();
    };
    inputA.click(function() {
      this.attr('text', toggle(this.attr('text')));
      gate_input_a.attr('text', this.attr('text'));
      return onclickEvent();
    });
    inputB.click(function() {
      this.attr('text', toggle(this.attr('text')));
      gate_input_b.attr('text', this.attr('text'));
      return onclickEvent();
    });
    gate_input_a.click(function() {
      this.attr('text', toggle(this.attr('text')));
      inputA.attr('text', this.attr('text'));
      return onclickEvent();
    });
    gate_input_b.click(function() {
      this.attr('text', toggle(this.attr('text')));
      inputB.attr('text', this.attr('text'));
      return onclickEvent();
    });
    makeMovingLine("M50, 50 h 600 v0", ".", powerDots, 3, "POWER");
    makeMovingLine("M200, 50 v80 h0", ".", powerDots, 3, "top");
    makeMovingLine("M200, 130 h70 v95 h40 v0", ".", powerDots, 3, "OO");
    makeMovingLine("M425, 50 v100 h50 v0", ".", powerDots, 3, "Output_UP");
    makeMovingLine("M425, 50 v300 h0", ".", powerDots, 3, "Output_DOWN");
    makeMovingLine("M200, 130 v120 h0", ".", powerDots, 3, "InputAON");
    makeMovingLine("M200, 250 v100 h0", ".", powerDots, 3, "InputBON");
    $('#POWER').show();
    $('#OO').show();
    $('#Output_DOWN').show();
    return $('#top').show();
  };

}).call(this);
