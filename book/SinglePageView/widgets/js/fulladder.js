// Generated by CoffeeScript 1.3.1
(function() {
  var a_clicked, and1_tt, and2_tt, b_clicked, black, interactive_color, c_clicked, darkgray, fontfamily, gray, green, input_a, input_b, input_c, or_tt, orange, red, white, xor1_tt, xor2_tt;

  black = '#000';
  white = "#fff";
  orange = '#2c9ad0';
  red = '#f00';
  green = '#0f0';
  interactive_color = '#ff9800';
  darkgray ="#5F5F5F";
  input_a = null;
  input_b = null;
  input_c = null;
  xor1_tt = null;
  xor2_tt = null;
  and1_tt = null;
  and2_tt = null;
  or_tt = null;
  a_clicked = false;
  b_clicked = false;
  c_clicked = false;
  fontfamily = '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';

  window.onload = function() {
    var add_x, add_y, and1, and1_tt_, and1_tt_acrossline, and1_tt_labels, and1_tt_text, and1_tt_updownline, and1_tt_visibility, and2, and2_tt_, and2_tt_acrossline, and2_tt_labels, and2_tt_text, and2_tt_updownline, and2_tt_visibility, interactive_colorSet, canvas, carry_in, carry_out, carryouLabel, changeCarryOut, changeSum, getInputBits, halfadder, highlightTruthTables, input_x, input_y, inputfontsize, makeMovingLine, or_gate, or_tt_, or_tt_acrossline, or_tt_labels, or_tt_text, or_tt_updownline, or_tt_visibility, outputSet, output_labels, reset, showHideTruthTables, showLabels, showWires, showallTT, sum, sumLabel, table_acrossLineX, table_acrossLineY, table_labelX, table_labelY, table_updownLineX, table_updownLineY, text_start, toggle, xor1, xor1_tt_, xor1_tt_acrossline, xor1_tt_labels, xor1_tt_text, xor1_tt_updownline, xor1_tt_visibility, xor2, xor2_tt_, xor2_tt_acrossline, xor2_tt_labels, xor2_tt_text, xor2_tt_updownline, xor2_tt_visibility, yposition;
    canvas = new Raphael('fulladder-ralph', 800, 500);
    halfadder = canvas.path("M613.39,251.229c-2.05-6.26-11.95-26.34-55.33-29h-15.99l2.17,3.75c1.78,3.08,3.97,7.14,5.96,11.25H532			v-22H420v1h-0.32c-0.89-16-13.63-28-29.17-28H360v13h-29v-63.12c2.72-0.78,4.81-3.06,5.31-5.88H354v-29h50.9			c-2.31,4.92-4.78,9.58-6.24,12.15l3.49,1.96c0.67-1.19,4.11-7.36,7.18-14.11h2.61c-2.16,4.6-4.39,8.87-5.72,11.29l-2.04,3.71			h15.34c38.99-1.76,52.2-22.49,55.4-29H631v-4H475.68c-1.24-4.7-9.55-27.17-55.62-30h-15.99l2.17,3.75			c1.78,3.08,3.97,7.14,5.96,11.25h-3.37c-2.93-6.24-6.05-11.75-6.69-12.86l-3.47,1.98c1.34,2.34,3.56,6.45,5.72,10.88h-96.46			c-1.07-2.84-3.81-4.85-7.02-4.85c-3.22,0-5.96,2.01-7.02,4.85h-8.5c-2.05-6.26-11.95-26.34-55.33-29h-15.99l2.17,3.75			c1.78,3.08,3.97,7.14,5.96,11.25h-3.37c-2.93-6.24-6.05-11.75-6.69-12.86l-3.47,1.98c1.34,2.34,3.56,6.45,5.72,10.88h-72.15			c-0.76-3.35-3.75-5.85-7.33-5.85c-3.59,0-6.58,2.5-7.33,5.85H97v4h30.76c0.79,2.41,2.76,4.29,5.24,4.93v20.07H97v4h36v39H97v4h36			v186h226v12h30.51c15.54,0,28.28-12,29.17-27H531v-33h18.94c-2.16,4.6-4.39,8.87-5.72,11.29l-2.04,3.71h15.34			c41.31-1.87,53.68-25.02,55.87-30H634v-4H613.39z M365,193.229h25.51c13.27,0,24.07,10.73,24.07,24s-10.8,24-24.07,24H365V193.229			z M419.83,60.229c42.37,2.62,49.88,22.17,50.96,26.04c-1.8,4.1-12.94,25.2-51.44,26.96h-6.77c3.5-6.73,10.19-20.4,10.33-26.95			c0.07-3.66-2.25-9.77-4.91-15.52c-0.08-0.18-0.16-0.36-0.24-0.53c-1.78-3.8-3.67-7.41-5.09-10H419.83z M414.07,74.229			c2.24,4.98,3.89,9.56,3.84,11.95c-0.07,2.81-1.9,7.86-4.16,13.05h-2.69c1.91-4.65,3.36-9.15,3.35-12.13			c-0.01-3.13-1.67-7.99-3.77-12.87H414.07z M303,80.109c2.72-0.78,4.81-3.06,5.31-5.88h97.95c2.29,5.11,4.14,10.11,4.15,12.89			c0.01,2.64-1.61,7.26-3.7,12.11H350v29h-14.07c-1.07-2.84-3.81-4.85-7.02-4.85c-3.22,0-5.96,2.01-7.02,4.85H303V80.109z			 M303,132.229h18.51c0.51,2.89,2.68,5.2,5.49,5.93v67.07h33v25h-57V132.229z M293.51,74.229c0.51,2.89,2.68,5.2,5.49,5.93v48.07			H172v-35.12c2.04-0.59,3.73-2.01,4.65-3.88h38.25c-2.31,4.92-4.78,9.58-6.24,12.15l3.49,1.96c0.67-1.19,4.11-7.36,7.18-14.11h2.61			c-2.16,4.6-4.39,8.87-5.72,11.29l-2.04,3.71h15.34c41.31-1.87,53.68-25.02,55.87-30H293.51z M229.83,46.229			c42.37,2.62,49.88,22.17,50.96,26.04c-1.8,4.1-12.94,25.2-51.44,26.96h-6.77c3.5-6.73,10.19-20.4,10.33-26.95			c0.07-3.66-2.25-9.77-4.91-15.52c-0.08-0.18-0.16-0.36-0.24-0.53c-1.78-3.8-3.67-7.41-5.09-10H229.83z M224.07,60.229			c2.24,4.98,3.89,9.56,3.84,11.95c-0.07,2.81-1.9,7.86-4.16,13.05h-2.69c1.91-4.65,3.36-9.15,3.35-12.13			c-0.01-3.13-1.67-7.99-3.77-12.87H224.07z M137,65.109c2.39-0.69,4.29-2.53,5.05-4.88h74.21c2.29,5.11,4.14,10.11,4.15,12.89			c0.01,2.64-1.61,7.26-3.7,12.11H177.4c-0.34-3.85-3.57-6.85-7.49-6.85c-3.93,0-7.15,3-7.49,6.85H137V65.109z M137,89.229h26.17			c0.95,1.92,2.71,3.38,4.83,3.93v35.07h-31V89.229z M359,314.229H137v-182h31v157.31l191-0.16V314.229z M389.51,325.229H364v-48			h25.51c13.27,0,24.07,10.73,24.07,24S402.78,325.229,389.51,325.229z M527,266.229v33H419v1h-0.32c-0.89-16-13.63-28-29.17-28H359			v13.15l-187,0.16v-153.31h127v102h61v12h30.51c15.54,0,28.28-12,29.17-27H528v22h24.07c2.24,4.98,3.89,9.56,3.84,11.95			c-0.07,2.81-1.9,7.86-4.16,13.05H527z M557.35,280.229h-6.77c3.5-6.73,10.19-20.4,10.33-26.95c0.07-3.66-2.25-9.77-4.91-15.52			c-0.08-0.18-0.16-0.36-0.24-0.53c-1.78-3.8-3.67-7.41-5.09-10h7.16c42.37,2.62,49.88,22.17,50.96,26.04			C606.99,257.369,595.85,278.469,557.35,280.229z").attr({
      fill: black
    });
    inputfontsize = "30px";
    interactive_colorSet = canvas.set().push(
      input_x = canvas.text(89, 57, "x"), 
      input_y = canvas.text(89, 87, "y"), 
      carry_in = canvas.text(89, 130, "carry in"), 
      gateLabels = canvas.set().push(
        xor1 = canvas.text(265, 72, "xor"), 
        xor2 = canvas.text(455, 87, "xor"), 
        and1 = canvas.text(403, 217, "and"), 
        and2 = canvas.text(403, 302, "and"), 
        or_gate = canvas.text(587, 252, "or")
      )
    ).attr({
      'text-anchor': 'end',
      'font-size': inputfontsize,
      'fill': interactive_color,
      'font-family': fontfamily,
      cursor: 'pointer'
    });

   gateLabels.attr({'font-size': '20px'});
   carry_in.attr({'font-size': '27px'})


    outputSet = canvas.set().push(
      sum = canvas.text(670, 87, "sum"), 
      carry_out = canvas.text(680, 254, "carry\nout")).attr({
      'text-anchor': 'center',
      'font-size': inputfontsize,
      'fill': black,
      'font-family': fontfamily
    });
    output_labels = canvas.set().push(
      sumLabel = canvas.text(650, 65, "sum"), 
      carryouLabel = canvas.text(640, 230, "carry out")).attr({
      'text-anchor': 'start',
      'font-size': "20px",
      'fill': darkgray,
      'font-family': fontfamily
    }).hide();
    xor1_tt_visibility = {
      is_visible: false
    };
    xor2_tt_visibility = {
      is_visible: false
    };
    and1_tt_visibility = {
      is_visible: false
    };
    and2_tt_visibility = {
      is_visible: false
    };
    or_tt_visibility = {
      is_visible: false
    };
    table_acrossLineX = 300;
    table_acrossLineY = 10;
    table_updownLineX = 275;
    table_updownLineY = 15;
    table_labelX = 297;
    table_labelY = 8;
    xor1_tt_ = [];
    xor1_tt_[0] = [];
    xor1_tt_[1] = [];
    xor1_tt = canvas.set().push(
      xor1_tt_updownline = canvas.rect(table_acrossLineX+2, table_acrossLineY, 2, 50), 
      xor1_tt_acrossline = canvas.rect(table_updownLineX, table_updownLineY, 40, 2), 
      xor1_tt_text = canvas.set().push(
        xor1_tt_labels = canvas.text(table_labelX, table_labelY, "x y\u00a0\u00a0\u00a0z"), 
        xor1_tt_[0][0] = canvas.text(table_labelX + 1, 25, "0 0\u00a0\u00a0\u00a00"), 
        xor1_tt_[0][1] = canvas.text(table_labelX + 1, 35, "0 1\u00a0\u00a0\u00a01"), 
        xor1_tt_[1][0] = canvas.text(table_labelX + 1, 45, "1 0\u00a0\u00a0\u00a01"), 
        xor1_tt_[1][1] = canvas.text(table_labelX + 1, 55, "1 1\u00a0\u00a0\u00a00")).attr({
      'font-size': '12px',
      'font-family': fontfamily
    })).attr({
      fill: black,
      stroke: 'none'
    }).hide();
    xor2_tt_ = [];
    xor2_tt_[0] = [];
    xor2_tt_[1] = [];
    xor2_tt = canvas.set().push(
      xor2_tt_updownline = canvas.rect(table_acrossLineX + 195, table_acrossLineY + 5, 2, 50), 
      xor2_tt_acrossline = canvas.rect(table_updownLineX + 195, table_updownLineY + 5, 40, 2), 
      xor2_tt_text = canvas.set().push(
        xor2_tt_labels = canvas.text(table_labelX + 195, table_labelY + 5, "x y\u00a0\u00a0\u00a0z"), 
        xor2_tt_[0][0] = canvas.text(491, 29, "0 0\u00a0\u00a0\u00a00"), 
        xor2_tt_[0][1] = canvas.text(491, 39, "0 1\u00a0\u00a0\u00a01"), 
        xor2_tt_[1][0] = canvas.text(491, 49, "1 0\u00a0\u00a0\u00a01"), 
        xor2_tt_[1][1] = canvas.text(491, 59, "1 1\u00a0\u00a0\u00a00")).attr({
      'font-size': '13px'
    })).attr({
      fill: black,
      stroke: 'none',
      'font-family': fontfamily
    }).hide();
    add_x = 145;
    add_y = 145;
    text_start = table_labelY + add_y + 15;
    and1_tt_ = [];
    and1_tt_[0] = [];
    and1_tt_[1] = [];
    and1_tt = canvas.set().push(and1_tt_updownline = canvas.rect(table_acrossLineX + add_x, table_acrossLineY + add_y, 2, 50), and1_tt_acrossline = canvas.rect(table_updownLineX + add_x, table_updownLineY + add_y, 40, 2), and1_tt_text = canvas.set().push(and1_tt_labels = canvas.text(table_labelX + add_x, table_labelY + add_y, "x y\u00a0\u00a0\u00a0z"), and1_tt_[0][0] = canvas.text(table_labelX + add_x - 1, text_start, "0 0\u00a0\u00a0\u00a00"), and1_tt_[0][1] = canvas.text(table_labelX + add_x - 1, text_start + 10, "0 1\u00a0\u00a0\u00a00"), and1_tt_[1][0] = canvas.text(table_labelX + add_x - 1, text_start + 20, "1 0\u00a0\u00a0\u00a00"), and1_tt_[1][1] = canvas.text(table_labelX + add_x - 1, text_start + 30, "1 1\u00a0\u00a0\u00a01")).attr({
      'font-size': '12px'
    })).attr({
      fill: black,
      stroke: 'none',
      'font-family': fontfamily
    }).hide();
    add_x = 145;
    add_y = 235;
    text_start = table_labelY + add_y + 15;
    and2_tt_ = [];
    and2_tt_[0] = [];
    and2_tt_[1] = [];
    and2_tt = canvas.set().push(and2_tt_updownline = canvas.rect(table_acrossLineX + add_x, table_acrossLineY + add_y, 2, 50), and2_tt_acrossline = canvas.rect(table_updownLineX + add_x, table_updownLineY + add_y, 40, 2), and2_tt_text = canvas.set().push(and2_tt_labels = canvas.text(table_labelX + add_x, table_labelY + add_y, "x y\u00a0\u00a0\u00a0z"), and2_tt_[0][0] = canvas.text(table_labelX + add_x - 1, text_start, "0 0\u00a0\u00a0\u00a00"), and2_tt_[0][1] = canvas.text(table_labelX + add_x - 1, text_start + 10, "0 1\u00a0\u00a0\u00a00"), and2_tt_[1][0] = canvas.text(table_labelX + add_x - 1, text_start + 20, "1 0\u00a0\u00a0\u00a00"), and2_tt_[1][1] = canvas.text(table_labelX + add_x - 1, text_start + 30, "1 1\u00a0\u00a0\u00a01")).attr({
      'font-size': '12px'
    })).attr({
      fill: black,
      stroke: 'none',
      'font-family': fontfamily
    }).hide();
    add_x = 320;
    add_y = 170;
    text_start = table_labelY + add_y + 15;
    or_tt_ = [];
    or_tt_[0] = [];
    or_tt_[1] = [];
    or_tt = canvas.set().push(or_tt_updownline = canvas.rect(table_acrossLineX + add_x, table_acrossLineY + add_y, 2, 50), or_tt_acrossline = canvas.rect(table_updownLineX + add_x, table_updownLineY + add_y, 40, 2), or_tt_text = canvas.set().push(or_tt_labels = canvas.text(table_labelX + add_x, table_labelY + add_y, "x y\u00a0\u00a0\u00a0z"), or_tt_[0][0] = canvas.text(table_labelX + add_x - 1, text_start, "0 0\u00a0\u00a0\u00a00"), or_tt_[0][1] = canvas.text(table_labelX + add_x - 1, text_start + 10, "0 1\u00a0\u00a0\u00a01"), or_tt_[1][0] = canvas.text(table_labelX + add_x - 1, text_start + 20, "1 0\u00a0\u00a0\u00a01"), or_tt_[1][1] = canvas.text(table_labelX + add_x - 1, text_start + 30, "1 1\u00a0\u00a0\u00a01")).attr({
      'font-size': '12px'
    })).attr({
      fill: black,
      stroke: 'none',
      'font-family': fontfamily
    }).hide();
    if (window.innerWidth >= 981) {
      yposition = 350;
    } else {
      yposition = 400;
    }
    reset = canvas.text(250, yposition, "Reset").attr({
      fill: interactive_color,
      'font-size': '18px',
      'text-anchor': "end",
      'font-family': fontfamily
    });
    showallTT = canvas.text(570, yposition, "Show all truth tables").attr({
      fill: interactive_color,
      'font-size': '18px',
      'text-anchor': "end",
      'font-family': fontfamily
    });
    input_x.click(function() {
      a_clicked = true;
      this.attr('text', toggle(this.attr('text')));
      changeCarryOut();
      changeSum();
      highlightTruthTables();
      showWires();
      return showLabels();
    });
    input_y.click(function() {
      b_clicked = true;
      this.attr('text', toggle(this.attr('text')));
      changeCarryOut();
      changeSum();
      highlightTruthTables();
      showWires();
      return showLabels();
    });
    carry_in.click(function() {
      c_clicked = true;
      this.attr('text', toggle(this.attr('text')));
      changeCarryOut();
      changeSum();
      highlightTruthTables();
      showWires();
      return showLabels();
    });
    xor1.click(function() {
      return showHideTruthTables(xor1_tt, xor1_tt_visibility);
    });
    xor2.click(function() {
      return showHideTruthTables(xor2_tt, xor2_tt_visibility);
    });
    and1.click(function() {
      return showHideTruthTables(and1_tt, and1_tt_visibility);
    });
    and2.click(function() {
      return showHideTruthTables(and2_tt, and2_tt_visibility);
    });
    or_gate.click(function() {
      return showHideTruthTables(or_tt, or_tt_visibility);
    });
    reset.click(function() {
      a_clicked = b_clicked = c_clicked = false;
      input_x.attr('text', 'x');
      input_y.attr('text', 'y');
      carry_in.attr('text', 'carry in');
      sum.attr('text', 'sum');
      carry_out.attr('text', 'carry\nout');
      showallTT.attr('text',"Show all truth tables");

      $('#lineA').hide();
      $('#lineB').hide();
      $('#lineC').hide();
      $('#lineD').hide();
      $('#lineE').hide();
      $('#lineF').hide();
      $('#lineG').hide();
      $('#lineH').hide();
      $('#lineI').hide();
      $('#lineJ').hide();
      $('#lineK').hide();
      $('#lineL').hide();
      xor1_tt.hide();
      xor2_tt.hide();
      and1_tt.hide();
      and2_tt.hide();
      or_tt.hide();
      return output_labels.hide();
    });
    showallTT.click(function() {
      if (showallTT.attr('text') === "Show all truth tables") {
        xor1_tt.show();
        xor2_tt.show();
        and1_tt.show();
        and2_tt.show();
        or_tt.show();
        return showallTT.attr('text', 'Hide all truth tables');
      } else {
        xor1_tt.hide();
        xor2_tt.hide();
        and1_tt.hide();
        and2_tt.hide();
        or_tt.hide();
        return showallTT.attr('text', 'Show all truth tables');
      }
    });
    $(window).resize(function() {
      if (window.innerWidth >= 981) {
        yposition = 350;
      } else {
        yposition = 400;
      }
      reset.attr({
        y: yposition
      });
      return showallTT.attr({
        y: yposition
      });
    });
    showLabels = function() {
      if (a_clicked && b_clicked && c_clicked) {
        return output_labels.show();
      }
    };
    changeSum = function() {
      var thesum;
      if (a_clicked && b_clicked && c_clicked) {
        getInputBits();
        thesum = input_a ^ input_b ^ input_c;
        return sum.attr('text', thesum);
      }
    };
    changeCarryOut = function() {
      var carryout;
      if (a_clicked && b_clicked && c_clicked) {
        getInputBits();
        carryout = input_c & (input_a ^ input_b) | (input_a & input_b);
        return carry_out.attr('text', carryout);
      }
    };
    getInputBits = function() {
      if (a_clicked || b_clicked || c_clicked) {
        if (a_clicked) {
          input_a = parseInt(input_x.attr('text'), 2);
        }
        if (b_clicked) {
          input_b = parseInt(input_y.attr('text'), 2);
        }
        if (c_clicked) {
          return input_c = parseInt(carry_in.attr('text'), 2);
        }
      }
    };
    toggle = function(number) {
      if (number === 0 || number === '0' || number=="x" || number=="carry in") {
        return 1;
      } else {
        return 0;
      }
      if (number === 1 || number === '1') {
        return 0;
      } else {
        return 0;
      }
    };
    showHideTruthTables = function(truthtable, flag) {
      if (flag.is_visible === false) {
        truthtable.show();
        return flag.is_visible = true;
      } else {
        truthtable.hide();
        return flag.is_visible = false;
      }
    };
    highlightTruthTables = function() {
      var a, axorb, b, c;
      xor1_tt_text.attr('fill', black);
      xor2_tt_text.attr('fill', black);
      and1_tt_text.attr('fill', black);
      and2_tt_text.attr('fill', black);
      or_tt_text.attr('fill', black);
      if (a_clicked && b_clicked && c_clicked) {
        a = parseInt(input_x.attr('text'), 2);
        b = parseInt(input_y.attr('text'), 2);
        c = parseInt(carry_in.attr('text'), 2);
        axorb = a ^ b;
        xor1_tt_[a][b].attr({
          fill: orange
        });
        xor2_tt_[axorb][c].attr({
          fill: orange
        });
        and1_tt_[c][axorb].attr({
          fill: orange
        });
        and2_tt_[b][a].attr({
          fill: orange
        });
        return or_tt_[axorb & c][a & b].attr({
          fill: orange
        });
      }
    };
    makeMovingLine = function(path, dashType, color, width, htmlid) {
      var i, interval, move, name;
      name = canvas.path(path).attr({
        'stroke-dasharray': ".",
        'stroke-width': 3,
        stroke: white
      });
      name.node.id = htmlid;
      $('#' + htmlid).hide();
      i = 0;
      move = function() {
        $('#' + htmlid).attr('stroke-dashoffset', i--);
        if (i < -200) {
          return i = 0;
        }
      };
      return interval = window.setInterval(move, 50);
    };
    makeMovingLine("M96, 58.3 h 120 v1", ".", white, 3, "lineA");
    makeMovingLine("M96, 87.3 h 120 v1", ".", white, 5, "lineB");
    makeMovingLine("M96, 130.3 h 256 v -29 h 55", ".", white, 5, "lineC");
    makeMovingLine("M135, 60.3 v 256 h 224", ".", white, 5, "lineD");
    makeMovingLine("M170, 90.3 v 197 h 189", ".", white, 5, "lineE");
    makeMovingLine("M290, 72.5 h 115 v1 ", ".", white, 5, "lineF");
    makeMovingLine("M301, 74 v 158.5 h58 ", ".", white, 5, "lineG");
    makeMovingLine("M329, 135 v 68 h30 ", ".", white, 5, "lineH");
    makeMovingLine("M420, 217.5 h 110 v 22 h 20 ", ".", white, 5, "lineI");
    makeMovingLine("M420, 301.5 h 109 v -33 h 20 ", ".", white, 5, "lineJ");
    makeMovingLine("M478, 87.5 h 153 v1", ".", white, 5, "lineK");
    makeMovingLine("M615, 253.5 h 17 v1", ".", white, 5, "lineL");
    return showWires = function() {
      getInputBits();
      if (input_a === 1) {
        $('#lineA').show();
        $('#lineD').show();
      } else {
        $('#lineA').hide();
        $('#lineD').hide();
      }
      if (input_b === 1) {
        $('#lineB').show();
        $('#lineE').show();
      } else {
        $('#lineB').hide();
        $('#lineE').hide();
      }
      if (input_c === 1) {
        $('#lineC').show();
        $('#lineH').show();
      } else {
        $('#lineC').hide();
        $('#lineH').hide();
      }
      if (input_a ^ input_b) {
        $('#lineF').show();
        $('#lineG').show();
      } else {
        $('#lineF').hide();
        $('#lineG').hide();
      }
      if ((input_a ^ input_b) ^ input_c) {
        $('#lineK').show();
      } else {
        $('#lineK').hide();
      }
      if ((input_a ^ input_b) && input_c) {
        $('#lineI').show();
      } else {
        $('#lineI').hide();
      }
      if (input_a && input_b) {
        $('#lineJ').show();
      } else {
        $('#lineJ').hide();
      }
      if (((input_a ^ input_b) && input_c) || (input_a && input_b)) {
        return $('#lineL').show();
      } else {
        return $('#lineL').hide();
      }
    };
  };

}).call(this);
