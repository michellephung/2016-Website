// Generated by CoffeeScript 1.3.1
(function() {
  var plus_0, and_0,and_, bigGate, black, blue, darkgray, drawLittleGate, drawMenu, getGateType, getOutputResult, gray, height, highlight_ii, highlight_io, highlight_oi, highlight_oo, inputA, inputB, nand_, nor_, not_, nxor_, or_, tthighlight, plus_, purple, red, toggle, truthTable, white, width, xor_;

  black = '#000';
  white = "#fff";
  gray = '#e0e0e0';
  darkgray = '#808080';
  tthighlight = "#2c9ad0";
  blue = "#7922A2";
  red = '#f00';
  purple = '#7922A2';

  plus_0 = {
    typeOfGate: 'plus_0',
    htmlID: 'plus_gate_0',
    ttID: 'plus_tt_0',
    oo: '0',
    oi: '1',
    io: '1',
    ii: '10',
    mini: "M0,110 h117 v2 h-117 v-2 M5,90 h10 v1 h-10 v-1 m5,-5 h1 v10 h-1 v-10"
  };

  and_0 = {
    typeOfGate: 'and_0',
    htmlID: 'and_gate_0',
    ttID: 'and_tt_0',
    oo: 0,
    oi: 0,
    io: 0,
    ii: 1,
    mini: "M170.871,78.002h-25.262c-0.893-16-13.633-28-29.172-28H91.797h-5.926v4.623v8.377h-31v4h31v25h-31v4h31 v6.761v5.239h5.926h24.641c15.539,0,28.279-12,29.172-27h25.262V78.002z M116.438,103.002H90.871v-48h25.566 c13.273,0,24.07,10.728,24.07,24S129.711,103.002,116.438,103.002z"
  };


  plus_ = {
    typeOfGate: 'plus',
    htmlID: 'plus_gate',
    ttID: 'plus_tt',
    oo: '0',
    oi: '1',
    io: '1',
    ii: '10',
    mini: "M20,105 h50 v2 h-50 v-2 m-10,-10 h10 v1 h-10 v-1 m5,-5 h1 v10 h-1 v-10"
  };

  and_ = {
    typeOfGate: 'and',
    htmlID: 'and_gate',
    ttID: 'and_tt',
    oo: 0,
    oi: 0,
    io: 0,
    ii: 1,
    mini: "M170.871,78.002h-25.262c-0.893-16-13.633-28-29.172-28H91.797h-5.926v4.623v8.377h-31v4h31v25h-31v4h31 v6.761v5.239h5.926h24.641c15.539,0,28.279-12,29.172-27h25.262V78.002z M116.438,103.002H90.871v-48h25.566 c13.273,0,24.07,10.728,24.07,24S129.711,103.002,116.438,103.002z"
  };

  or_ = {
    typeOfGate: 'or',
    htmlID: 'or_gate',
    ttID: 'or_tt',
    oo: 0,
    oi: 1,
    io: 1,
    ii: 1,
    mini: "M141.311,78.012c-2.05-6.26-11.95-26.34-55.33-29h-15.99l2.17,3.75c1.78,3.08,3.96,7.14,5.96,11.25				h-20.25v4h22.12c2.23,4.99,3.88,9.56,3.83,11.95c-0.06,2.81-1.89,7.86-4.16,13.05h-21.79v4h19.98c-2.16,4.6-4.39,8.87-5.72,11.29				l-2.04,3.71h15.35c41.3-1.87,53.68-25.02,55.87-30h20.56v-4H141.311z M85.271,107.012h-6.78c3.51-6.73,10.2-20.4,10.33-26.95				c0.08-3.68-2.27-9.84-4.95-15.62c-0.06-0.14-0.13-0.29-0.2-0.43c-1.77-3.8-3.67-7.4-5.08-10h7.16				c42.37,2.62,49.88,22.17,50.96,26.04C134.901,84.152,123.771,105.252,85.271,107.012z"
  };

  not_ = {
    typeOfGate: 'not',
    htmlID: 'not_gate',
    ttID: 'not_tt',
    o: 1,
    i: 0,
    mini: "M127.511,78.522c-0.73-2.03-2.66-3.48-4.94-3.48c-2.41,0-4.44,1.64-5.05,3.85l-30.65-23.39v22.02h-24v4				h24v25.18l30.77-24.62c0.73,2.02,2.67,3.46,4.93,3.46c2.1,0,3.91-1.23,4.75-3.02h23.55v-4H127.511z M90.871,98.382v-34.8				l22.25,17L90.871,98.382z M122.571,83.542c-1.65,0-3.01-1.24-3.22-2.83l0.27-0.21l-0.3-0.23c0.01-1.78,1.47-3.23,3.25-3.23				c1.8,0,3.25,1.46,3.25,3.25S124.371,83.542,122.571,83.542z"
  };

  nand_ = {
    typeOfGate: 'nand',
    htmlID: 'nand_gate',
    ttID: 'nand_tt',
    oo: 1,
    oi: 1,
    io: 1,
    ii: 0,
    mini: "M153.657,78.002c-0.05-0.15-0.12-0.3-0.189-0.44c-0.88-1.77-2.721-2.92-4.7-2.92			c-1.63,0-3.12,0.74-4.09,1.97c-1.53-15.3-13.971-26.61-29.061-26.61h-30.72v13h-31v4h31v25h-31v4h31v12h30.72			c14.82,0,27.09-10.92,28.96-24.95c0.971,1.29,2.511,2.09,4.19,2.09c2.37,0,4.45-1.6,5.06-3.86c0.03-0.09,0.051-0.18,0.07-0.28h16			v-3H153.657z M115.617,103.002h-25.72v-48h25.72c13.271,0,24.07,10.73,24.07,24S128.888,103.002,115.617,103.002z M151.897,80.742			c-0.02,0.09-0.05,0.17-0.08,0.26c-0.46,1.27-1.68,2.14-3.05,2.14s-2.59-0.85-3.05-2.14c-0.011-0.01-0.011-0.03-0.021-0.05			c-0.12-0.33-0.18-0.69-0.18-1.06c0-0.51,0.12-0.99,0.35-1.45c0.08-0.15,0.16-0.3,0.261-0.44c0.59-0.85,1.569-1.36,2.64-1.36			c1.04,0,2.03,0.52,2.63,1.36c0.11,0.14,0.2,0.29,0.28,0.45c0.22,0.45,0.34,0.93,0.34,1.44			C152.018,80.182,151.978,80.472,151.897,80.742z"
  };

  nor_ = {
    typeOfGate: 'nor',
    htmlID: 'nor_gate',
    ttID: 'nor_tt',
    oo: 1,
    oi: 0,
    io: 0,
    ii: 0,
    mini: "M151.707,78.012c-0.72-2.09-2.68-3.5-4.939-3.5c-1.95,0-3.66,1.07-4.561,2.67			c-2.619-7.03-13.43-25.62-55.04-28.17H71.178l2.17,3.75c1.78,3.08,3.97,7.14,5.96,11.25h-20.41v4h22.28			c2.239,4.98,3.89,9.56,3.84,11.95c-0.061,2.81-1.89,7.86-4.16,13.05h-21.96v4h20.14c-2.149,4.6-4.37,8.87-5.71,11.29l-2.04,3.71			h15.341c40.13-1.82,52.949-23.72,55.659-29.53c0.91,1.52,2.58,2.53,4.48,2.53c2.08,0,3.899-1.19,4.75-3h11.38v-4H151.707z			 M86.457,107.012h-6.77c3.5-6.73,10.19-20.4,10.33-26.95c0.07-3.75-2.38-10.09-5.12-15.98c-0.01-0.03-0.02-0.05-0.03-0.07			c-1.779-3.8-3.67-7.41-5.09-10h7.16c42.37,2.62,49.88,22.17,50.96,26.04C136.098,84.152,124.957,105.252,86.457,107.012z			 M149.928,80.512c-0.351,1.47-1.65,2.5-3.16,2.5c-1.79,0-3.25-1.46-3.25-3.25s1.46-3.25,3.25-3.25c1.51,0,2.81,1.03,3.16,2.51			c0.06,0.25,0.09,0.49,0.09,0.74S149.987,80.252,149.928,80.512z"
  };

  xor_ = {
    typeOfGate: 'xor',
    htmlID: 'xor_gate',
    ttID: 'xor_tt',
    oo: 0,
    oi: 1,
    io: 1,
    ii: 0,
    mini: "M142.215,77.002c-2.061-6.25-12.08-26.34-56.03-29h-16.17l2.21,3.76c1.8,3.08,4.01,7.14,6.03,11.24h-3.63			c-2.92-6.11-5.98-11.46-6.62-12.55l-3.46,2.01c1.32,2.28,3.49,6.24,5.62,10.54h-12.78v4h14.69c2.39,5.22,4.35,10.38,4.359,13.21			c0.01,2.58-1.56,7.06-3.609,11.79h-15.44v4h13.62c-2.38,5.03-4.96,9.83-6.47,12.46l3.479,1.99c0.69-1.21,4.271-7.57,7.42-14.45			h2.55c-2.18,4.59-4.43,8.85-5.79,11.28l-2.069,3.72h15.51c41.86-1.87,54.38-25.04,56.58-30h21.17v-4H142.215z M77.175,92.002			c1.87-4.53,3.27-8.89,3.26-11.8c-0.01-3.2-1.77-8.2-3.97-13.2h3.689c2.261,4.98,3.931,9.56,3.881,11.95			c-0.061,2.81-1.91,7.86-4.21,13.05H77.175z M85.465,106.002h-6.89c3.55-6.74,10.319-20.4,10.46-26.95			c0.13-6.19-6.7-19.42-10.36-26.05h7.28c24.56,1.5,37.359,8.73,43.779,14.54c5.521,5,7.36,9.82,7.87,11.51			C135.745,83.082,124.154,104.252,85.465,106.002z"
  };

  nxor_ = {
    typeOfGate: 'nxor',
    htmlID: 'nxor_gate',
    ttID: 'nxor_tt',
    oo: 1,
    oi: 0,
    io: 0,
    ii: 1,
    mini: "M153.194,78.012c-0.72-2.04-2.659-3.5-4.939-3.5c-1.96,0-3.67,1.07-4.561,2.67			c0.11,0.3,0.2,0.58,0.29,0.83h0.4c-0.09,0.19-0.16,0.39-0.22,0.6c-0.05-0.18-0.11-0.38-0.181-0.6h-0.67			c0.09-0.29,0.221-0.57,0.38-0.83c-2.619-7.03-13.43-25.62-55.04-28.17H72.665l2.17,3.75c1.78,3.08,3.97,7.14,5.96,11.25h-2.84			c-3.08-6.69-6.54-12.82-7.221-13.99l-3.47,1.98c1.45,2.54,3.94,7.15,6.25,12.01h-13.13v4h14.96c2.07,4.71,3.65,9.18,3.66,11.75			c0,2.85-1.87,7.99-4.21,13.25h-14.41v4h12.57c-2.141,4.49-4.351,8.64-5.69,11.02l3.48,1.96c0.63-1.12,3.729-6.69,6.649-12.98h3.13			c-2.149,4.6-4.37,8.87-5.71,11.29l-2.04,3.71h15.341c40.13-1.82,52.949-23.72,55.659-29.53c-0.1-0.15-0.18-0.31-0.25-0.47h0.46			c0.15-0.33,0.25-0.58,0.311-0.73c0.09,0.26,0.21,0.5,0.359,0.73h-0.67c-0.06,0.14-0.13,0.3-0.21,0.47			c0.91,1.51,2.58,2.53,4.48,2.53c2.09,0,3.89-1.23,4.74-3h11.39v-4H153.194z M79.185,93.012c2.141-5.03,3.83-10.04,3.82-13.26			c-0.01-2.89-1.43-7.24-3.29-11.74h2.95c2.239,4.98,3.89,9.56,3.84,11.95c-0.061,2.81-1.89,7.86-4.16,13.05H79.185z			 M87.944,107.012h-6.77c3.5-6.73,10.19-20.4,10.33-26.95c0.07-3.75-2.38-10.09-5.12-15.98c-0.01-0.03-0.02-0.05-0.03-0.07			c-1.779-3.8-3.67-7.41-5.09-10h7.16c42.37,2.62,49.88,22.17,50.96,26.04C137.585,84.152,126.444,105.252,87.944,107.012z			 M150.604,82.012c-0.6,0.61-1.43,1-2.35,1s-1.75-0.39-2.351-1c-0.56-0.58-0.899-1.38-0.899-2.25c0-0.64,0.189-1.24,0.51-1.75			c0.58-0.9,1.59-1.5,2.74-1.5c1.149,0,2.16,0.6,2.74,1.5c0.319,0.51,0.51,1.11,0.51,1.75			C151.505,80.632,151.165,81.432,150.604,82.012z"
  };

  width = 217;

  height = 161;

  inputA = 0;

  inputB = 0;

  bigGate = null;

  truthTable = null;

  highlight_oo = null;

  highlight_oi = null;

  highlight_io = null;

  highlight_ii = null;

  $(function() {
    return drawMenu();
  });


  drawMenu = function() {
    drawLittleGate('plus_0');
    drawLittleGate('and_0');
    drawLittleGate('or');
    drawLittleGate('not');
    drawLittleGate('nand');
    drawLittleGate('nor');
    drawLittleGate('xor');
    return drawLittleGate('nxor');
  };

  getGateType = function(type) {
    switch (type) {
      case 'plus_0':
        return plus_0;
      case 'and_0':
        return and_0;
      case 'or':
        return or_;
      case 'not':
        return not_;
      case 'nand':
        return nand_;
      case 'nor':
        return nor_;
      case 'xor':
        return xor_;
      case 'nxor':
        return nxor_;
    }
  };

  drawLittleGate = function(typeOFLogicGate) {
    var board, 
        gate_body, 
        highlightRow, 
        htmlID, 
        ii, 
        ii_inputs, 
        ii_output, 
        inA, 
        inB, 
        io, 
        miniPath, 
        oi, 
        oo, 
        outC, 
        rows, 
        t, 
        table, 
        ttID, 
        type, 
        typeii, 
        typeio, 
        typeoi, 
        typeoo;
    
    var fontsize ='22px';
    type = getGateType(typeOFLogicGate);

    htmlID = type.htmlID;
    miniPath = type.mini;
    ttID = type.ttID;
    typeoo = type.oo;
    typeoi = type.oi;
    typeio = type.io;
    typeii = type.ii;
    board = new Raphael(htmlID, width, height);
    gate_body = board.path(miniPath).attr({
      'stroke': 'none',
      'fill': black
    });
    if (htmlID !== 'not_gate') {
      inA = board.text(45, 65, "x").attr({
        'fill': purple,
        'font-size': fontsize
      });
      inB = board.text(45, 93, "y").attr({
        'fill': purple,
        'font-size': fontsize
      });
      outC = board.text(181, 78, "z").attr({
        'fill': black,
        'font-size': fontsize,
        'text-anchor': 'end'
      });
    }  else {
      inA = board.text(45, 80, "x").attr({
        'fill': purple,
        'font-size': fontsize
      });
      inB = board.text(0, 0, "0").hide();
      outC = board.text(165, 80, "x'").attr({
        'fill': black,
        'font-size': fontsize
      });
    }


    if (htmlID === "plus_gate") {
      outC.attr({
        x: 49,
        y: 120
      });
    }

    if ( htmlID ==="plus_gate_0"){
      inA.attr({
        x: 60
      });
      inB.attr({
        x: 60
      });
      outC.attr({
        x: 65,
        y:130
      });
    }

    if(htmlID ==="and_gate_0"){
      inA.attr({
        x: 40
      });
      inB.attr({
        x: 40
      });

      outC.attr({
        x: 190,
        y:78
      });
    }

    table = new Raphael(ttID, width, height);
    if (htmlID !== 'not_gate') {  //all gates
      t = table.path("M50,60 h130 m-45,-20 v110 ")
      rows = table.set().push(
        oo = table.text(165, 75, " 0 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0" + typeoo), 
        oi = table.text(165, 95, " 0 \u00a0\u00a0\u00a0 1  \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0" + typeoi), 
        io = table.text(165, 115, " 1 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0" + typeio), 
        ii = table.set().push(
          ii_inputs = table.text(140, 135, " 1 \u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0"), 
          ii_output = table.text(165, 135, typeii) 
        )
      ).attr({
          'font-size': "16px",
          'fill': black,
          'text-anchor': 'end'
        });
    } else {  //not gate
      t = table.path("M10,60 h100 m-50,-20 v100 ");
      rows = table.set().push(oo = table.text(30, 75, " 0   \u00a0\u00a0\u00a0 " + type.o), 
        oi = table.text(90, 95, ""), io = table.text(30, 115, " 1   \u00a0\u00a0\u00a0 " + type.i), 
        ii = table.text(90, 135, " ")
      ).attr({
        'font-size':  "20px",
        'fill': black,
        'text-anchor': 'start'
      });
    }
    inA.click(function() {
      this.attr('text', toggle(this.attr('text')));
      outC.attr('text', getOutputResult(inA.attr('text'), inB.attr('text'), typeOFLogicGate));
      return highlightRow();
    });
    inB.click(function() {
      this.attr('text', toggle(this.attr('text')));
      outC.attr('text', getOutputResult(inA.attr('text'), inB.attr('text'), typeOFLogicGate));
      return highlightRow();
    });
    return highlightRow = function() {
      var a, b;
      a = inA.attr('text');
      b = inB.attr('text');
      oo.attr('fill', black);
      io.attr('fill', black);
      oi.attr('fill', black);
      ii.attr('fill', black);
      if (a === 'x' || b === 'y') {
        return;
      }
      a = parseInt(a, 10);
      b = parseInt(b, 10);
      if (a === 0) {
        if (b === 0) {
          return oo.attr('fill', tthighlight);
        } else {
          return oi.attr('fill', tthighlight);
        }
      } else {
        if (b === 0) {
          return io.attr('fill', tthighlight);
        } else {
          return ii.attr('fill', tthighlight);
        }
      }
    };
  };
  toggle = function(bit) {
    if (bit === 0 || bit === '0') {
      return 1;
    } else {
      return 0;
    }
  };

  getOutputResult = function(inputX, inputY, typeOFLogicGate) {
    var type;
    type = getGateType(typeOFLogicGate);
    if (type.typeOfGate === 'not') {
      return toggle(inputX);
    }
    if (inputX === 'x' || inputY === 'y') {
      return 'z';
    } else {
      if (inputX === 0) {
        if (inputY === 0) {
          return type.oo;
        } else {
          return type.oi;
        }
      }
      if (inputX === 1) {
        if (inputY === 0) {
          return type.io;
        } else {
          return type.ii;
        }
      }
    }
  };

}).call(this);
