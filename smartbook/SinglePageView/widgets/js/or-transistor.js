// Generated by CoffeeScript 1.3.1
(function() {
  var black, clickable, darkgray, fontfamily, gray, green, orange, purple, red, white, yellow, powerBar, powerDots;

  black = '#000';
  white = "#fff";
  gray = '#B3B3B3';
  red = '#f00';
  orange = "#2c9ad0"; // truthtable highlight
  yellow = '#FFE303';
  green = '#0f0';
  purple = "#8A2BE2";
  clickable = '#7922A2';
  red = "#B20000";
  darkgray = '#767676';
  gray = "#999";

  powerBar = darkgray;
  powerDots = red;

  fontfamily = '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';

  window.onload = function() {
    var blackThickWires, changeGateOutput, changeResults, clickables, columnLabels, g, gate, gateA, gateB, gateC, gate_input_a, gate_input_b, gate_output_c, gates, groundLine, highlightRowinTable, ii, inputA_label, inputB_label, inputa, inputb, io, labels, leftTransistors, makeMovingLine, midWire, oi, oo, or_gate_path, output, outputWire, output_label, outputc, powerLine, r, rightTransistors, rows, showWires, signalText, table, toggle, transistorA, transistorB, transistorC, whenClicked;
    r = new Raphael('transistor-or-ralph', 665, 500);
    g = new Raphael('ORgate_and_TT', 400, 400);
    or_gate_path = 'M141.311,78.012c-2.05-6.26-11.95-26.34-55.33-29h-15.99l2.17,3.75c1.78,3.08,3.96,7.14,5.96,11.25\
				h-20.25v4h22.12c2.23,4.99,3.88,9.56,3.83,11.95c-0.06,2.81-1.89,7.86-4.16,13.05h-21.79v4h19.98c-2.16,4.6-4.39,8.87-5.72,11.29\
				l-2.04,3.71h15.35c41.3-1.87,53.68-25.02,55.87-30h20.56v-4H141.311z M85.271,107.012h-6.78c3.51-6.73,10.2-20.4,10.33-26.95\
				c0.08-3.68-2.27-9.84-4.95-15.62c-0.06-0.14-0.13-0.29-0.2-0.43c-1.77-3.8-3.67-7.4-5.08-10h7.16\
				c42.37,2.62,49.88,22.17,50.96,26.04C134.901,84.152,123.771,105.252,85.271,107.012z';
    gate = g.path(or_gate_path).attr({
      fill: black,
      stroke: black
    });
    table = g.path("M250,45 h120 m-50,-20 v110 ").attr({
      'stroke': black,
      'stroke-width': "1.5px"
    });
    rows = g.set().push(
      oo = g.text(345, 60, " 0 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0" + 0), 
      oi = g.text(345, 80, " 0 \u00a0\u00a0\u00a0 1  \u00a0\u00a0\u00a0 \u00a0" + 1), 
      io = g.text(345, 100, " 1 \u00a0\u00a0\u00a0 0 \u00a0\u00a0\u00a0 \u00a0" + 1), 
      ii = g.text(345, 120, " 1 \u00a0\u00a0\u00a0 1 \u00a0\u00a0\u00a0 \u00a0" + 1)).attr({
      'font-size': '18px',
      'fill': darkgray,
      'text-anchor': 'end',
      'font-family': fontfamily
    });
    columnLabels = g.set().push(inputa = g.text(265, 30, "A"), inputb = g.text(301, 30, "B"), outputc = g.text(341, 30, "C")).attr({
      'font-size': '18px',
      'fill': darkgray,
      'font-family': fontfamily
    });
    clickables = g.set().push(gate_input_a = g.text(45, 65, "A"), gate_input_b = g.text(45, 95, "B")).attr({
      'font-size': '18px',
      'fill': clickable,
      'font-family': fontfamily
    });
    gate_output_c = g.text(185, 80, "C").attr({
      'font-size': '18px',
      'fill': darkgray,
      'font-family': fontfamily
    });
    blackThickWires = r.set().push(groundLine = r.path("M61,400 h600"), leftTransistors = r.path("M261, 100 v150 m-100,0 h200 v50 h-50 v50 h50 v50 m-195,-150 v50 h-50 v50 h50 v50"), midWire = r.path("M261,200 h145"), rightTransistors = r.path("M511,100 v75 h-50 v50 h50 v175"), outputWire = r.path("M511,150 h40")).attr({
      stroke: black,
      'stroke-width': '7pt'
    });
    powerLine = r.path("M61,100 h 600").attr({
      fill: powerBar,
      stroke: powerBar,
      'stroke-width': '7pt'
    });
    gates = r.set().push(gateA = r.path("M105,300 v50 m0,-25 h-10"), gateB = r.path("M300,300 v50 m0,-25 h-10"), gateC = r.path("M450,175 v50 m0,-25 h-10")).attr({
      stroke: black,
      'stroke-width': '3pt'
    });
    signalText = r.set().push(transistorA = r.text(75, 325, 0), transistorB = r.text(270, 325, 0), transistorC = r.text(420, 200, 1), output = r.text(560, 150, "Output")).attr({
      'font-size': '30px',
      fill: clickable,
      'text-anchor': "start",
      'font-family': fontfamily
    });
    labels = r.set().push(inputA_label = r.text(75, 300, "input A"), inputB_label = r.text(270, 300, "input B"), output_label = r.text(570, 125, 'output')).attr({
      'font-size': '14px',
      'font-family': fontfamily,
      fill: darkgray
    });
    transistorC.attr('fill', black);
    output.attr('fill', black);
    toggle = function(bit) {
      if (bit === 1 || bit === '1') {
        return 0;
      } else {
        return 1;
      }
    };
    changeResults = function() {
      var a, b;
      a = parseInt(transistorA.attr('text'));
      b = parseInt(transistorB.attr('text'));
      if (a | b) {
        transistorC.attr('text', 0);
        return output.attr('text', 1);
      } else {
        transistorC.attr('text', 1);
        return output.attr('text', 0);
      }
    };
    highlightRowinTable = function() {
      var a, b;
      a = parseInt(transistorA.attr('text'));
      b = parseInt(transistorB.attr('text'));
      rows.attr({
        fill: darkgray
      });
      if (a === '0' || a === 0) {
        if (b === '0' || b === 0) {
          return oo.attr({
            fill: orange
          });
        } else {
          return oi.attr({
            fill: orange
          });
        }
      } else {
        if (b === '0' || b === 0) {
          return io.attr({
            fill: orange
          });
        } else {
          return ii.attr({
            fill: orange
          });
        }
      }
    };
    changeGateOutput = function() {
      var a, b;
      a = parseInt(transistorA.attr('text'));
      b = parseInt(transistorB.attr('text'));
      if (a === 1 && b === 1) {
        return gate_output_c.attr('text', 1);
      } else {
        return gate_output_c.attr('text', 0);
      }
    };
    whenClicked = function(clickable) {
      clickable.attr('text', toggle(clickable.attr('text')));
      changeResults();
      showWires();
      highlightRowinTable();
      return changeGateOutput();
    };
    makeMovingLine = function(path, dashType, color, width, htmlid) {
      var i, interval, move, name;
      name = r.path(path).attr({
        'stroke-dasharray': dashType,
        'stroke-width': width,
        stroke: color
      });
      name.node.id = htmlid;
      $('#' + htmlid).hide();
      i = 0;
      move = function() {
        $('#' + htmlid).attr('stroke-dashoffset', i--);
        if (i < -20) {
          return i = 0;
        }
      };
      return interval = window.setInterval(move, 50);
    };
    showWires = function() {
      var a, b, c;
      a = parseInt(transistorA.attr('text'));
      b = parseInt(transistorB.attr('text'));
      c = parseInt(transistorC.attr('text'));
      if (a) {
        $('#transistorA_on').show();
      } else {
        $('#transistorA_on').hide();
        $('#bothOFF').hide();
      }
      if (b) {
        $('#transistorB_on').show();
      } else {
        $('#transistorB_on').hide();
        $('#bothOFF').hide();
      }
      if (!a && !b) {
        $('#bothOFF').show();
      } else {
        $('#bothOFF').hide();
      }
      if (c) {
        $('#transistorC_on').show();
        return $('#transistorC_off').hide();
      } else {
        $('#transistorC_on').hide();
        return $('#transistorC_off').show();
      }
    };
    transistorA.click(function() {
      whenClicked(this);
      return gate_input_a.attr('text', this.attr('text'));
    });
    transistorB.click(function() {
      whenClicked(this);
      return gate_input_b.attr('text', this.attr('text'));
    });
    gate_input_a.click(function() {
      this.attr('text', toggle(this.attr('text')));
      transistorA.attr('text', this.attr('text'));
      changeResults();
      showWires();
      highlightRowinTable();
      return changeGateOutput();
    });
    gate_input_b.click(function() {
      this.attr('text', toggle(this.attr('text')));
      transistorB.attr('text', this.attr('text'));
      changeResults();
      showWires();
      highlightRowinTable();
      return changeGateOutput();
    });
    makeMovingLine("M61, 100 h600", ".", powerDots, 3, "POWER");
    makeMovingLine("M261, 100 v100 h145", ".", powerDots, 3, "bothOFF");
    makeMovingLine("M261, 100 v150 h-95 v50 h-50 v50 h50 v 50  m95,-150 h100 v50 h-50 v50 h50 v 50 ", ".", powerDots, 3, "bothON");
    makeMovingLine("M261, 100 v150 h100 v150 ", ".", powerDots, 3, "transistorB_on");
    makeMovingLine("M261, 100 v150 h-95 v150", ".", powerDots, 3, "transistorA_on");
    makeMovingLine("M511, 100 v300 ", ".", powerDots, 3, "transistorC_on");
    makeMovingLine("M511, 100 v50 h40", ".", powerDots, 3, "transistorC_off");
    $('#POWER').show();
    $('#bothOFF').show();
    return $('#transistorC_on').show();
  };

}).call(this);
